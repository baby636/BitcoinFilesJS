diff --git a/node_modules/bitcore-lib-cash/index.js b/node_modules/bitcore-lib-cash/index.js
index a562c53..eaa3746 100644
--- a/node_modules/bitcore-lib-cash/index.js
+++ b/node_modules/bitcore-lib-cash/index.js
@@ -12,8 +12,8 @@ bitcore.versionGuard = function(version) {
     throw new Error(message);
   }
 };
-bitcore.versionGuard(global._bitcoreCash);
-global._bitcoreCash = bitcore.version;
+// bitcore.versionGuard(global._bitcoreCash);
+// global._bitcoreCash = bitcore.version;
 
 // crypto
 bitcore.crypto = {};
diff --git a/node_modules/bitcore-lib-cash/lib/script/script.js b/node_modules/bitcore-lib-cash/lib/script/script.js
index 4a4ca80..14135c2 100644
--- a/node_modules/bitcore-lib-cash/lib/script/script.js
+++ b/node_modules/bitcore-lib-cash/lib/script/script.js
@@ -736,6 +736,36 @@ Script.buildMultisigOut = function(publicKeys, threshold, opts) {
   return script;
 };
 
+// TODO BitcoinFiles
+Script.buildPushOut = function(publicKeys, opts) {
+  opts = opts || {};
+  var script = new Script();
+  script.add(Opcode.OP_HASH160)
+    .add(Opcode.OP_SWAP)
+    .add(Opcode.OP_HASH160)
+    .add(Opcode.OP_CAT)
+    .add(Opcode.OP_2DUP)
+    .add(Opcode.OP_CAT)
+    .add(Opcode.OP_HASH160);
+  script.add(Hash.sha256ripemd160(Buffer.from(
+    Buffer.concat([publicKeys[0],
+      Hash.sha256ripemd160(
+        Buffer.from(opts[0].slice(520))
+      ),
+      Hash.sha256ripemd160(
+        Buffer.from(opts[0].slice(0,520))
+      )
+    ])
+  )));
+  script.add(Opcode.OP_EQUALVERIFY)
+    .add(Buffer.from(opts[1]))
+    .add(Opcode.OP_2DROP)
+    .add(Opcode.OP_CHECKSIGVERIFY)
+    .add(Opcode.OP_DEPTH)
+    .add(Opcode.OP_NOT);
+  return script;
+};
+
 /**
  * A new Multisig input script for the given public keys, requiring m of those public keys to spend
  *
@@ -861,6 +891,26 @@ Script.buildP2SHMultisigIn = function(pubkeys, threshold, signatures, opts) {
   return s;
 };
 
+// TODO BitcoinFiles
+Script.buildP2SHPushIn = function(pubkeys, opts, signatures) {
+  $.checkArgument(_.isArray(pubkeys));
+  $.checkArgument(_.isArray(opts));
+  $.checkArgument(_.isArray(signatures));
+  var s = new Script();
+  _.each(signatures, function(signature) {
+    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');
+    // TODO: allow signatures to be an array of Signature objects
+    s.add(signature);
+  });
+  s.add(pubkeys[0]);
+  s.add(Buffer.from(opts[0].slice(0, 520)));
+  s.add(Buffer.from(opts[0].slice(520)));
+  s.add(
+    Script.buildPushOut(pubkeys, opts).toBuffer()
+  );
+  return s;
+};
+
 /**
  * @returns {Script} a new pay to public key hash output for the given
  * address or public key
diff --git a/node_modules/bitcore-lib-cash/lib/transaction/input/multisigscripthash.js b/node_modules/bitcore-lib-cash/lib/transaction/input/multisigscripthash.js
index 7d00787..b4c1e10 100644
--- a/node_modules/bitcore-lib-cash/lib/transaction/input/multisigscripthash.js
+++ b/node_modules/bitcore-lib-cash/lib/transaction/input/multisigscripthash.js
@@ -16,6 +16,10 @@ var TransactionSignature = require('../signature');
 /**
  * @constructor
  */
+// TODO BitcoinFiles
+// pubkeys = [pubkey]
+// threshold = 1
+// opts = [push up to 1013, push up to 484]
 function MultiSigScriptHashInput(input, pubkeys, threshold, signatures, opts) {
   /* jshint maxstatements:20 */
   opts = opts || {};
@@ -24,12 +28,10 @@ function MultiSigScriptHashInput(input, pubkeys, threshold, signatures, opts) {
   pubkeys = pubkeys || input.publicKeys;
   threshold = threshold || input.threshold;
   signatures = signatures || input.signatures;
-  if (opts.noSorting) {
-    this.publicKeys = pubkeys
-  } else  {
-    this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });
-  }
-  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold, opts);
+  // TODO BitcoinFiles
+  this.publicKeys = pubkeys
+  this.opts = opts
+  this.redeemScript = Script.buildPushOut(this.publicKeys, opts);
   $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script),
                'Provided public keys don\'t hash to the provided output');
   this.publicKeyIndex = {};
@@ -44,6 +46,8 @@ function MultiSigScriptHashInput(input, pubkeys, threshold, signatures, opts) {
 inherits(MultiSigScriptHashInput, Input);
 
 MultiSigScriptHashInput.prototype.toObject = function() {
+  // TODO BitcoinFiles
+  if (console) console.log("toObject unimplemented for P2SH data push inputs!");
   var obj = Input.prototype.toObject.apply(this, arguments);
   obj.threshold = this.threshold;
   obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });
@@ -102,9 +106,9 @@ MultiSigScriptHashInput.prototype.addSignature = function(transaction, signature
 };
 
 MultiSigScriptHashInput.prototype._updateScript = function(signingMethod, checkBitsField) {
-  this.setScript(Script.buildP2SHMultisigIn(
+  this.setScript(Script.buildP2SHPushIn(
     this.publicKeys,
-    this.threshold,
+    this.opts,
     this._createSignatures(signingMethod),
     { cachedMultisig: this.redeemScript, checkBits: checkBitsField, signingMethod }
   ));
@@ -165,14 +169,10 @@ MultiSigScriptHashInput.prototype.isValidSignature = function(transaction, signa
   );
 };
 
-MultiSigScriptHashInput.OPCODES_SIZE = 7; // serialized size (<=3) + 0 .. N .. M OP_CHECKMULTISIG
-MultiSigScriptHashInput.SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)
-MultiSigScriptHashInput.PUBKEY_SIZE = 34; // size (1) + DER (<=33)
-
+// TODO BitcoinFiles
 MultiSigScriptHashInput.prototype._estimateSize = function() {
-  return MultiSigScriptHashInput.OPCODES_SIZE +
-    this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE +
-    this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;
+  return 33 + 3 + this.opts[0].length + 
+    74+34+3+3+this.opts[1].length+3+8;
 };
 
 module.exports = MultiSigScriptHashInput;
